<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    /* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

    html,
    body,
    div,
    span,
    applet,
    object,
    iframe,
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    blockquote,
    pre,
    a,
    abbr,
    acronym,
    address,
    big,
    cite,
    code,
    del,
    dfn,
    em,
    img,
    ins,
    kbd,
    q,
    s,
    samp,
    small,
    strike,
    strong,
    sub,
    sup,
    tt,
    var,
    b,
    u,
    i,
    center,
    dl,
    dt,
    dd,
    ol,
    ul,
    li,
    fieldset,
    form,
    label,
    legend,
    table,
    caption,
    tbody,
    tfoot,
    thead,
    tr,
    th,
    td,
    article,
    aside,
    canvas,
    details,
    embed,
    figure,
    figcaption,
    footer,
    header,
    hgroup,
    menu,
    nav,
    output,
    ruby,
    section,
    summary,
    time,
    mark,
    audio,
    video {
        margin: 0;
        padding: 0;
        border: 0;
        font-size: 100%;
        font: inherit;
        vertical-align: baseline;
    }

    /* HTML5 display-role reset for older browsers */
    article,
    aside,
    details,
    figcaption,
    figure,
    footer,
    header,
    hgroup,
    menu,
    nav,
    section {
        display: block;
    }

    body {
        line-height: 1;
        font-size: 62.5%;
    }

    ol,
    ul {
        list-style: none;
    }

    blockquote,
    q {
        quotes: none;
    }

    blockquote:before,
    blockquote:after,
    q:before,
    q:after {
        content: '';
        content: none;
    }

    table {
        border-collapse: collapse;
        border-spacing: 0;
    }

    body {
        background-color: #c0d2f7;
    }

    main {
        padding: 10px;
        display: flex;
        flex-direction: column;
        color: #ffffff;
    }


    .main-header {
        text-align: center;
    }

    .game-wrap {
        width: 100%;
        display: flex;
        justify-content: center;
        gap: 10px;
        padding-top: 30px;
    }

    .user-list-wrap {
        display: flex;
        padding: 30px 0;
        gap: 20px;
        margin: 10px 0;
        background-color: #dcdcdc;
        box-shadow: ;
        border-radius: 10px;
    }

    .noti-wrap {
        display: flex;
        padding: 30px 0;
        gap: 20px;
        margin: 10px 0;
        background-color: #dcdcdc;
        border-radius: 10px;
    }

    .noti {
        margin-top: 30px;
        text-align: center;
        text-decoration: underline;
        color: #808080;
    }

    .card {
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-grow: 0;
        text-align: center;
        width: 100px;
        /* border: 1px olive solid; */
        height: 100px;
        border-radius: 30px;
        background: linear-gradient(145deg, #adbdde, #cde1ff);
        box-shadow: 20px 20px 60px #a3b3d2,
            -20px -20px 60px #ddf2ff;
    }

    .card.select {
        border-radius: 50px;
        background: linear-gradient(117deg, #ff0000, #f30097);
        box-shadow: inset 20px 20px 60px #a3b3d2,
            inset -20px -20px 60px #ddf2ff;
        transition: 0.7s ease-in;
    }
    .card.scissors {}

    .card.rock {}

    .card.paper {}
</style>

<body>
    <main>
        <h1 class="main-header">방배동벨리 사내게임</h1>
        <div class="user-list-wrap">
            <span>참가자</span>
            <span>인원수</span>
            <span class="user-list"></span>
        </div>
        <div class="noti-wrap">
            <div>게임 스타트 시간</div>
            <div>스타트 버튼</div>
        </div>

        <h3 class="noti">*카드를 선택해주세요*</h3>

        <div class="game-wrap">
            <div class="card scissors">가위</div>
            <div class="card rock">바위</div>
            <div class="card paper">보</div>
        </div>
        <div class="chat-wrap">
            <input type="text" name="nickname" id="nickname">
            <input type="text" name="message" id="message">
            <div onclick="sendMessage()" class="send-btn">
                <span>전송</span>
            </div>
        </div>
        <div id="chat-log"></div>
    </main>

</body>
<script src="/socket.io/socket.io.js"></script>
<script>
    class Game {
        constructor(name) {
            this.name = name;
            
        }
        init() { 
            let userList = document.querySelector(".user-list");
            let span = document.createElement("span");
            span.innerHTML = this.name;
            userList.appendChild(span);
            return `닉네임 ${this.name}`;
        }
    }
    
    document.addEventListener("DOMContentLoaded", function(){
        let user = new Game("심재형").init();
        console.log(user);
        cardEventHandler();
    });
    
    
    const card = document.querySelectorAll(".card");
    function cardEventHandler () {
        card.forEach(el => {
            el.addEventListener("click", cardClick);
        })
    }
    const cardClick = (ev) => {
        card.forEach(el => el.classList.remove("select"))
        ev.currentTarget.classList.add("select");
    }




    const socket = io.connect('http://localhost:3000', { // ws:// 를 안쓰고 http를 쓴다
        path: '/socket.io', // 서버 path와 일치시켜준다
        transports: ['websocket']
    });
    function sendMessage() {
        let name = document.getElementById("nickname").value;
        let context = document.getElementById("message").value;
        socket.emit('message', { name, context });
    }

    socket.on('usercount', (count) => {
        let userCounter = document.getElementsByClassName('user-list');
        userCounter.innerText = "현재 " + count + "명이 서버에 접속해있습니다.";
    });

    // 메시지 수신시 HTML에 메시지 내용 작성
    socket.on('message', (msg) => {
        let messageList = document.getElementById('chat-log');
        let messageTag = document.createElement("div");
        let nameSpan = document.createElement("span");
        let contextSpan = document.createElement("span");

        nameSpan.innerText = msg.name
        messageTag.appendChild(nameSpan);
        contextSpan.innerText = msg.context;
        messageTag.appendChild(contextSpan);

        messageList.appendChild(messageTag);
    });


</script>

</html>